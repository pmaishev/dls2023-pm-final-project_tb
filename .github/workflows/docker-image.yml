name: Docker Image CI

on:
  push:
    branches: [ "main", "devel" ]
  pull_request:
    branches: [ "main", "devel" ]

jobs:
  build-base:
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - uses: actions/checkout@v3
    - name: Login to Github Packages
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          workflows:
            - '.github/workflows/**'
            - 'build/DockerfileBase'
            - 'cnn/**'
            - 'requirements.txt'
    - uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and Push the Docker image
      if: steps.filter.outputs.workflows == 'true'
      run: |
        echo ${{ github.workflow }}
        echo ${GITHUB_SHA::8}
        docker build -t ghcr.io/pmaishev/dls2023-pm-final-project_tb/base:latest -f build/DockerfileBase .
        docker push ghcr.io/pmaishev/dls2023-pm-final-project_tb/base:latest
        docker rmi ghcr.io/pmaishev/dls2023-pm-final-project_tb/base:latest
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint
    - name: Analysing the code with pylint
      run: |
        pylint $(git ls-files '*.py') --max-line-length=140 --generated-members="numpy.* ,torch.*" -E
        python tests/test.py
  build:
    runs-on: ubuntu-latest
    needs: [lint, build-base]
    steps:
    - uses: actions/checkout@v3
    - name: Login to Github Packages
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and Push the Docker image
      run: |
        echo ${{ github.workflow }}
        echo ${GITHUB_SHA::8}
        mkdir -p build/app/data_test
        cp *.py build/app
        cp requirements.txt build/app/
        cp -r model build/app
        cp -r data_test/* build/app/data_test
        docker build . --file build/Dockerfile --tag ghcr.io/pmaishev/dls2023-pm-final-project_tb/${{ github.ref_name }}:${GITHUB_SHA::8}
        docker push ghcr.io/pmaishev/dls2023-pm-final-project_tb/${{ github.ref_name }}:${GITHUB_SHA::8}
        docker tag ghcr.io/pmaishev/dls2023-pm-final-project_tb/${{ github.ref_name }}:${GITHUB_SHA::8} ghcr.io/pmaishev/dls2023-pm-final-project_tb/${{ github.ref_name }}:latest
        docker push ghcr.io/pmaishev/dls2023-pm-final-project_tb/${{ github.ref_name }}:latest
        docker rmi ghcr.io/pmaishev/dls2023-pm-final-project_tb/${{ github.ref_name }}:${GITHUB_SHA::8}
  deploy:
    runs-on: ubuntu-latest
    needs: build
    container: pmaishev/rancher:6
    steps:
    - name: Deploy Docker image
      run: |
        echo ${{ github.workflow }}
        echo ${GITHUB_SHA::8}
        export RANCHER_STACK=dls
        export RANCHER_ENVIRONMENT=Pmaishev
        export RANCHER_IMAGE=ghcr.io/pmaishev/dls2023-pm-final-project_tb/${{ github.ref_name }}:${GITHUB_SHA::8}
        export RANCHER_SERVICE=bot
        cd /app && node rancher.js
